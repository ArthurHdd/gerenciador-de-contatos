gerenciador-contatos/
├── src/
│   └── gerenciador.py
├── tests/
│   └── test_gerenciador.py
├── README.md
└── requirements.txt
class Contato:
    def __init__(self, nome, telefone):
        self.nome = nome
        self.telefone = telefone

    def __str__(self):
        return f"{self.nome}: {self.telefone}"


class GerenciadorContatos:
    def __init__(self):
        self.contatos = []

    def adicionar_contato(self, nome, telefone):
        contato = Contato(nome, telefone)
        self.contatos.append(contato)

    def remover_contato(self, nome):
        self.contatos = [contato for contato in self.contatos if contato.nome != nome]

    def listar_contatos(self):
        return [str(contato) for contato in self.contatos]


if __name__ == "__main__":
    gerenciador = GerenciadorContatos()

    while True:
        print("\nGerenciador de Contatos")
        print("1. Adicionar Contato")
        print("2. Remover Contato")
        print("3. Listar Contatos")
        print("4. Sair")
        escolha = input("Escolha uma opção: ")

        if escolha == "1":
            nome = input("Digite o nome: ")
            telefone = input("Digite o telefone: ")
            gerenciador.adicionar_contato(nome, telefone)
        elif escolha == "2":
            nome = input("Digite o nome do contato a ser removido: ")
            gerenciador.remover_contato(nome)
        elif escolha == "3":
            print("Contatos:")
            for contato in gerenciador.listar_contatos():
                print(contato)
        elif escolha == "4":
            break
        else:
            print("Opção inválida.")
import unittest
from src.gerenciador import GerenciadorContatos

class TestGerenciadorContatos(unittest.TestCase):

    def setUp(self):
        self.gerenciador = GerenciadorContatos()

    def test_adicionar_contato(self):
        self.gerenciador.adicionar_contato("Alice", "1234-5678")
        self.assertEqual(len(self.gerenciador.contatos), 1)

    def test_remover_contato(self):
        self.gerenciador.adicionar_contato("Alice", "1234-5678")
        self.gerenciador.remover_contato("Alice")
        self.assertEqual(len(self.gerenciador.contatos), 0)

    def test_listar_contatos(self):
        self.gerenciador.adicionar_contato("Alice", "1234-5678")
        contatos = self.gerenciador.listar_contatos()
        self.assertIn("Alice: 1234-5678", contatos)

if __name__ == "__main__":
    unittest.main()
# Gerenciador de Contatos

Este é um projeto de um gerenciador de contatos em Python, utilizando orientação a objetos.

## Como usar

1. Clone o repositório:
2. Navegue até a pasta do projeto:
3. Execute o gerenciador:

## Testes

Para rodar os testes, use:

## Licença

Este projeto está licenciado sob a MIT License.
unittest2
